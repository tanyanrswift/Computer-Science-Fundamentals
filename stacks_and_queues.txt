1. What is the main difference between a stack and a queue?
  A stack implements a last in first out priority collection. A queue implements a first in first out priority collection.

2. What are the similarities between stacks and queues?
  Both stacks and queues are linear data structures. They also both have an input and an output/exit point even though they
  have a different priority.

3. Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use
for each option and why?
  I would use a stack for the UNDO option because the last character that was typed (last in) would be the first character you would remove (first out). I would
  use a queue data structure for a REDO option because the last character that was deleted (first in) would be the first character you would redo (first out).


1. Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".
  1. Create empty stack
  2. Push all characters of string to stack
  3. Pop all characters from stack to string

  class Stack {
    constructor(){
      this.stack = [];
    }
    add(element){
      this.stack.push(element);
    }
    remove(){
      return this.stack.pop();
    }
  }
  function reverseString(string){
    var characters = string.split('');
    var stack = new Stack();
    for (var i = 0; i < characters.length; i++){
      stack.add(characters[i]);
    }
    var array = [];
    var stackLength = stack.stack.length;
    for (var i = 0; i < stackLength; i++){
      array.push(stack.remove());
    }
    return array.join('');
  }

2. Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is
not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

  class Queue {
    constructor() {
      this.queue = [];
    }

    enqueue(element) {
      this.queue.push(element);
    }

    dequeue() {
      var temp = this.queue[0];
      this.queue.shift()
        return temp;
    }

    popMethod() {
      for(var i = 0; i < this.queue.length-1; i++) {
        var temp = this.dequeue();
        this.enqueue(temp);
      }
        return this.dequeue();
    }
  }


1.Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.
  First I will define a queue class. Then I will follow the pseudocode outlined in the checkpoint to implement the functions.

  FUNCTION enqueue(element)
    APPEND element to the end of the list
  END FUNCTION

  FUNCTION dequeue
    SET temp to the first element
    REMOVE FIRST element of list from list
    RETURN temp
  END FUNCTION

class Queue {
  constructor() {
    this.queue = [];
  }

  enqueue(element) {
    this.queue.push(element);
  }

  dequeue() {
    var temp = this.queue[0];
    this.queue.shift()
      return temp;
  }
}
