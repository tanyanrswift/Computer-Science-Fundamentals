1. In your own words, explain what clean code is and why it is important.
  Clean code is code that considers factors such as readability, ease of maintenance, and simplicity. It basically accounts for best practices in order
   to make the code easier to understand across the board for everyone, and easier to troubleshoot for issues.

2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used
 object that relies on computers and explain what would happen if the code was not created to an acceptable standard.
 There are a lot of commonly used objects now that rely on computers. The one in particular that I thought of was a cash register/point of sale system. If
 this code was not created to an acceptable standard it could result in a lot of problems for the company, including loss of revenue if math is not done
 correctly, loss of time if there are a lot of bugs that employees have to fight around to check people out, and loss of employees/customers if the frustration
 with bugs leads to employees wanting to leave the position/company or customers not wanting to come back.

3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.
FUNCTION do(x, y)               // Creating a new function
IF y = "F" THEN               // Check if y is equal "F"
SET z to (x−32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
PRINT z                       // Print result
ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
PRINT z                       // Print result
END IF
END FUNCTION

  I would not consider the following code to be clean code. There are too many comments that are not needed to understand the code. We could change the
  naming in order to be able to remove these.

  FUNCTION convertTemperatures(temperature, unit)
  IF unit = "F" THEN
  SET result to (temperature−32) * (5/9)
  PRINT result
  ELSE IF unit = "C" THEN
  SET result to temperature * 1.8000 + 32.00
  PRINT result
  END IF
  END FUNCTION

4. Would you consider the following to be clean code? Explain why or why not? If not, refactor the code.
FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

  I would not consider the following code to be clean code. The order of the logic doesn't make sense and isn't the best for readability. It could also use
  some rewording.

    FUNCTION calcPercent(sum, total)
      SET percentage to sum / total * 100
      IF(total = 0) THEN
        PRINT "Sorry, cannot divide by 0"
      ELSE
        SET percentage to sum / total * 100
      END IF
      PRINT percentage
    END FUNCTION

5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   INIT totalDue = subTotal * discountRate + (subTotal * tax)
   PRINT "Your total due is: " + totalDue

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - totalDue
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + totalDue
   END IF
END FUNCTION

b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
  IF guest.accountActive && IF NOT guest.hasOverdueBooks && IF guest.outstandingFees = 0 THEN
    APPEND book to guest.books
    SET book.status to "Checked Out"
    PRINT "Your books have been issued."
 ELSE
    PRINT "Unable to check out book."
 END IF
END FUNCTION

c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccountStatus

  FUNCTION displayBalance
    PRINT balance
  END FUNCTION

  FUNCTION checkStatus
    IF NOT(customer.hasCheckingAccount) THEN
        CALL offerCheckingAccount
    END

END

CLASS BankAccountWithdrawalDeposit
  FUNCTION deposit(amount)
   SET balance to balance + amount
  END FUNCTION

  FUNCTION withdraw(amount)
    IF balance > amount THEN
      SET balance to balance - amount
    END
  END FUNCTION

END

CLASS BankAccountOffers

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

END

6. Square-Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root,
otherwise return the sum.
Example:
[10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5.
[1,1] returns 2 because 2 is not a perfect square.
The square root of 2 is approximately 1.414213562373095.

  function isSquare(integers) {
    var sum = integers.reduce((a, b) => a + b);
    if(sum > 0 && Math.sqrt(sum) % 1 === 0) {
      return Math.sqrt(sum);
    } else {
      return sum;
    }
  }

7. Duplicate-Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at
least twice in the array, and false if every element is distinct.

  function hasDuplicate(integers) {
    for(var i = 0; i < integers.length; i++) {
      for(var j = i + 1; j < integers.length; j++) {
        if(integers[i] === integers[j]) {
          return true;
        } else {
          return false;
        }
      }
    }
  }
