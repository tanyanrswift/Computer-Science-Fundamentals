1. What is time complexity and what is its relation to algorithms?
  Time complexity gives you an estimation of how long it takes to execute a program. It can allow you to determine how long it will take to execute an algorithm, as this is important in terms of efficiency.

2. What is runtime?
  Runtime can be used as a synonym for time complexity, but it can also refer to the time duration of an algorithm.

3. How is the runtime of an algorithm calculated?
  The runtime of an algorithm is calculated but adding how many instructions the algorithm will execute as a function of the size of its input, and then it is simplified
  the largest term without constants. In other words, we determine what the largest term is.

4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic
growth rate not covered and place it in the correct spot in your list.
  Constant growth
  Linear growth
  Log-Linear growth
  Logarithmic growth
  Quadratic growth
  Cubic growth
  Exponential growth

5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.
  One example of exponential growth could be how cells multiply. You start with one cell, and it will divide into two, then the two cells will each divide into two more each,
  etc.

6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

  The time complexity of the following snippet of code will be O(n).

7. Determine the time complexity of the following snippet of code.

If you get stuck, read through the graphical representation section again.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

  The time complexity of the following snippet of code will be O(n^2).

8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

  The time complexity of the following snippet of code will be O(2^n).

9. Out of the code snippets you just saw, which is the most time efficient?
  The first snippet of code (question 6) would be time most time efficient.
