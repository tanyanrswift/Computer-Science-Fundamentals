1. What is a binary tree and what makes it unique to other trees?
  A binary tree is a data structure that has the option to have a left child and a right child coming from the root node at the top.

2. What is a heuristic?
  A heuristic is basically a best guess approach to finding all possible paths, where an algorithm will make guesses but it won't be 100% accurate.

3. What is another problem besides the shortest-path problem that requires the use of heuristics?
  Another problem besides the shortest-path problem that could require the use of heuristics would be playing a game, such as chess or checkers. Even
  though an algorithm could calculate every possible move available, it would be easier for it to narrow it down and make guesses so to speak.

4. What is the difference between a depth-first search and a breadth-first search?
  A depth-first search will start on one branch and go through that branch before reversing back to others. A breadth-first search will start with the root
  node and then search within the nodes on the next level first before continuing to the level below.

5. Explain in your own words what an undirected, a-cyclic, unweighted graph is.
  An undirected, a-cyclic, unweighted graph is a graph that does not have a direct start and end location at a node, has nodes that do not form loops, and
  does not assign the cost of travel between it's nodes.

6. What kind of graph is a binary search tree?
  A binary search tree is an directed, a-cyclic, unweighted node.


1. Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.
Example: The value 10 exists in the tree. The value 23 does not exist in the tree.

  function checkValue(node, value) {
    if(node === null) {
      return null;
    } else if (value < node.value) {
      return this.search(node.left, value);
    } else if (value > node.value) {
      return this.search(node.right, value);
    } else {
      return node;
    }
  }

**2. Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.
Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.
